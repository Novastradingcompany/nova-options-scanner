import io
from datetime import datetime
import pandas as pd
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer
import streamlit as st

def download_pdf_button(trades_df: pd.DataFrame, meta: dict, nova_summary: str = ""):
    """Create a downloadable Nova PDF Report."""
    if trades_df is None or trades_df.empty:
        st.warning("‚ö†Ô∏è No data available for PDF export.")
        return None

    # --- buffer for in-memory PDF ---
    buffer = io.BytesIO()

    # --- setup doc ---
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    story = []
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name="CenterTitle", alignment=1, fontSize=16, spaceAfter=12))
    styles.add(ParagraphStyle(name="Body", fontSize=10, leading=12))

    # --- Header ---
    story.append(Paragraph("Nova Options Scanner Report", styles["CenterTitle"]))
    story.append(Paragraph(f"Generated: {datetime.now().strftime('%B %d, %Y %I:%M %p')}", styles["Body"]))
    story.append(Spacer(1, 12))

    # --- Meta Summary ---
    if meta:
        meta_info = "<br/>".join([
            f"<b>Ticker:</b> {meta.get('ticker', '-')}",
            f"<b>Expiry:</b> {meta.get('expiry', '-')}",
            f"<b>Strategy:</b> {meta.get('strategy', '-')}",
            f"<b>DTE:</b> {meta.get('dte', '-')}",
            f"<b>Contracts:</b> {meta.get('contracts', '-')}",
            f"<b>Min POP:</b> {meta.get('min_pop', '-')}"
        ])
        story.append(Paragraph(meta_info, styles["Body"]))
        story.append(Spacer(1, 12))

    # --- Table (Top 10 Trades) ---
    df = trades_df.head(10).copy()
    show_cols = [c for c in [
        "Trade", "Credit (Realistic)", "Max Loss ($)", "POP %", "Breakeven", "Distance %"
    ] if c in df.columns]
    data = [show_cols] + df[show_cols].astype(str).values.tolist()

    table = Table(data, repeatRows=1)
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.black),
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.white),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
        ("FONTSIZE", (0, 0), (-1, -1), 8),
        ("BOTTOMPADDING", (0, 0), (-1, 0), 8),
        ("GRID", (0, 0), (-1, -1), 0.25, colors.grey),
    ]))
    story.append(table)
    story.append(Spacer(1, 20))

    # --- Nova‚Äôs Auto Take ---
    if nova_summary:
        story.append(Paragraph("<b>üß† Nova‚Äôs Auto Take:</b>", styles["Body"]))
        story.append(Spacer(1, 4))
        story.append(Paragraph(nova_summary.replace("\n", "<br/>"), styles["Body"]))
        story.append(Spacer(1, 12))

    # --- Footer ---
    story.append(Paragraph("Generated by Nova‚Äôs Trading Company", styles["Body"]))

    # --- Build and download ---
    doc.build(story)
    buffer.seek(0)
    pdf_data = buffer.getvalue()

    filename = f"NovaScan_{meta.get('ticker', 'Report')}_{datetime.now().strftime('%Y-%m-%d')}.pdf"
    st.download_button(
        label="üìÑ Download Nova PDF Report",
        data=pdf_data,
        file_name=filename,
        mime="application/pdf",
    )
